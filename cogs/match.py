import discord
from discord.ext import commands
from discord import app_commands
from .utils import db_instance, deserialize_interests, deserialize_vector, cosine_similarity, calculate_interests_similarity
import json

class Match(commands.Cog):
    """Cog pour la logique de matching entre utilisateurs"""
    
    def __init__(self, bot):
        self.bot = bot
    
    @app_commands.command(name="findmatch", description="Trouver une correspondance bas√©e sur vos int√©r√™ts")
    async def findmatch(self, interaction: discord.Interaction):
        """Trouver et proposer un match pour l'utilisateur"""
        user_id = str(interaction.user.id)
        
        try:
            # R√©cup√©rer le profil de l'utilisateur
            async with db_instance.connection.execute(
                "SELECT * FROM profiles WHERE user_id = ?", 
                (user_id,)
            ) as cursor:
                user_profile = await cursor.fetchone()
            
            if not user_profile:
                await interaction.response.send_message(
                    "‚ùå Vous devez cr√©er un profil avant de chercher des correspondances.\n"
                    "Utilisez `/createprofile` pour commencer !",
                    ephemeral=True
                )
                return
            
            # Extraire les donn√©es du profil utilisateur
            user_age = user_profile[3]
            user_interests = deserialize_interests(user_profile[4])
            user_vector = deserialize_vector(user_profile[7])
            
            # R√©cup√©rer tous les autres profils (excluant l'utilisateur actuel)
            async with db_instance.connection.execute(
                "SELECT * FROM profiles WHERE user_id != ?", 
                (user_id,)
            ) as cursor:
                all_profiles = await cursor.fetchall()
            
            if not all_profiles:
                await interaction.response.send_message(
                    "üòî **Aucune correspondance trouv√©e**\n\n"
                    "Il n'y a pas encore d'autres utilisateurs avec un profil. "
                    "Revenez plus tard quand d'autres personnes auront rejoint !",
                    ephemeral=True
                )
                return
            
            # Calculer les scores de matching
            matches = []
            
            for profile in all_profiles:
                profile_user_id = profile[0]
                profile_age = profile[3]
                profile_interests = deserialize_interests(profile[4])
                profile_vector = deserialize_vector(profile[7])
                
                # FILTRAGE STRICT : Jamais m√©langer mineurs et majeurs
                user_is_minor = user_age < 18
                profile_is_minor = profile_age < 18
                
                # Exclure si m√©lange mineur/majeur
                if user_is_minor != profile_is_minor:
                    continue
                
                # Filtrage par √©cart d'√¢ge (maximum 8 ans)
                age_diff = abs(user_age - profile_age)
                if age_diff > 8:
                    continue
                
                # V√©rifier la tranche d'√¢ge autoris√©e (13-30 ans)
                if profile_age < 13 or profile_age > 30:
                    continue
                
                # Calculer le score bas√© sur les int√©r√™ts communs
                interests_score = calculate_interests_similarity(user_interests, profile_interests)
                
                # Calculer la similarit√© cosinus des vecteurs
                vector_score = cosine_similarity(user_vector, profile_vector)
                
                # Score final (pond√©ration: 70% int√©r√™ts, 30% vecteur)
                final_score = (interests_score * 0.7) + (vector_score * 0.3)
                
                # Ajouter √† la liste si score significatif
                if final_score > 0.1:  # Seuil minimum
                    matches.append({
                        'user_id': profile_user_id,
                        'prenom': profile[1],
                        'pronoms': profile[2],
                        'age': profile_age,
                        'interests': profile_interests,
                        'description': profile[5],
                        'score': final_score
                    })
            
            if not matches:
                await interaction.response.send_message(
                    "üòî **Aucune correspondance trouv√©e**\n\n"
                    "Aucun utilisateur ne correspond √† vos crit√®res actuellement. "
                    "Essayez de diversifier vos int√©r√™ts ou revenez plus tard !",
                    ephemeral=True
                )
                return
            
            # Trier par score d√©croissant et prendre le meilleur
            matches.sort(key=lambda x: x['score'], reverse=True)
            best_match = matches[0]
            
            # R√âPONDRE IMM√âDIATEMENT √† l'interaction pour √©viter l'expiration
            await interaction.response.send_message(
                "üîç **Recherche de correspondance...**\n\n"
                f"Correspondance trouv√©e avec un score de {best_match['score']:.0%} ! "
                "Je vous envoie les d√©tails en message priv√©. üì©",
                ephemeral=True
            )
            
            # Puis traiter l'envoi du DM (apr√®s avoir r√©pondu √† l'interaction)
            try:
                dm_channel = await interaction.user.create_dm()
                
                # Calculer les int√©r√™ts communs
                common_interests = list(set(user_interests) & set(best_match['interests']))
                common_interests_str = ", ".join(common_interests[:5])  # Max 5 int√©r√™ts
                if len(common_interests) > 5:
                    common_interests_str += f" (+{len(common_interests)-5} autres)"
                
                embed = discord.Embed(
                    title="üíñ Correspondance trouv√©e !",
                    description="Voici une personne qui pourrait vous int√©resser :",
                    color=discord.Color.pink()
                )
                
                embed.add_field(
                    name="üë§ Profil", 
                    value=f"**Pr√©nom :** {best_match['prenom']}\n"
                          f"**Pronoms :** {best_match['pronoms']}\n"
                          f"**√Çge :** {best_match['age']} ans", 
                    inline=True
                )
                
                embed.add_field(
                    name="üéØ Compatibilit√©", 
                    value=f"**Score :** {best_match['score']:.0%}\n"
                          f"**Int√©r√™ts communs :** {len(common_interests)}", 
                    inline=True
                )
                
                embed.add_field(
                    name="üí≠ Description", 
                    value=best_match['description'][:200] + ('...' if len(best_match['description']) > 200 else ''), 
                    inline=False
                )
                
                if common_interests:
                    embed.add_field(
                        name="ü§ù Vos int√©r√™ts communs", 
                        value=common_interests_str, 
                        inline=False
                    )
                
                embed.add_field(
                    name="üéØ R√©pondre √† cette correspondance", 
                    value="‚Ä¢ R√©agissez ‚úÖ pour **accepter** cette correspondance\n"
                          "‚Ä¢ R√©agissez ‚ùå pour **refuser** et passer au suivant\n"
                          "‚Ä¢ Utilisez `/findmatch` √† nouveau pour d'autres suggestions", 
                    inline=False
                )
                
                embed.set_footer(text="üí° Ce profil a √©t√© anonymis√© pour votre s√©curit√©")
                
                match_message = await dm_channel.send(embed=embed)
                
                # Ajouter les r√©actions pour accepter/refuser
                await match_message.add_reaction('‚úÖ')
                await match_message.add_reaction('‚ùå')
                
                # Sauvegarder l'info du match pour traiter les r√©actions
                await self.save_match_proposal(
                    interaction.user.id, 
                    best_match['user_id'], 
                    match_message.id,
                    best_match['score']
                )
                
                # Envoyer un message de suivi si possible
                try:
                    await interaction.followup.send(
                        "‚úÖ **Message priv√© envoy√© avec succ√®s !**",
                        ephemeral=True
                    )
                except:
                    pass  # Ignore les erreurs de followup
                    
            except discord.Forbidden:
                # Si l'envoi en DM √©choue, envoyer un followup
                try:
                    # Recalculer common_interests au cas o√π
                    common_interests_fallback = list(set(user_interests) & set(best_match['interests']))
                    await interaction.followup.send(
                        "üîí **Impossible d'envoyer en priv√©**\n\n"
                        f"**Correspondance trouv√©e** (Score: {best_match['score']:.0%})\n"
                        f"**√Çge :** {best_match['age']} ans\n"
                        f"**Int√©r√™ts communs :** {len(common_interests_fallback)}\n\n"
                        "Activez les messages priv√©s pour recevoir plus de d√©tails !",
                        ephemeral=True
                    )
                except:
                    pass  # Ignore les erreurs de followup
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la recherche de match pour {user_id}: {e}")
            # V√©rifier si l'interaction a d√©j√† √©t√© r√©pondue
            if not interaction.response.is_done():
                await interaction.response.send_message(
                    "‚ùå Une erreur s'est produite lors de la recherche de correspondances. "
                    "Veuillez r√©essayer plus tard.",
                    ephemeral=True
                )
    
    async def save_match_proposal(self, requester_id: int, target_id: str, message_id: int, score: float):
        """Sauvegarder une proposition de match pour traitement des r√©actions"""
        try:
            # Cr√©er table si elle n'existe pas
            await db_instance.connection.execute("""
                CREATE TABLE IF NOT EXISTS match_proposals (
                    message_id TEXT PRIMARY KEY,
                    requester_id TEXT NOT NULL,
                    target_id TEXT NOT NULL,
                    score REAL NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    status TEXT DEFAULT 'pending'
                )
            """)
            
            await db_instance.connection.execute("""
                INSERT OR REPLACE INTO match_proposals (message_id, requester_id, target_id, score)
                VALUES (?, ?, ?, ?)
            """, (str(message_id), str(requester_id), target_id, score))
            
            await db_instance.connection.commit()
            
        except Exception as e:
            print(f"‚ùå Erreur sauvegarde match proposal: {e}")
    
    @commands.Cog.listener()
    async def on_reaction_add(self, reaction, user):
        """G√©rer les r√©actions sur les messages de correspondance"""
        # Ignorer les r√©actions du bot
        if user.bot:
            return
            
        # V√©rifier si c'est une r√©action sur un message de match
        try:
            async with db_instance.connection.execute(
                "SELECT requester_id, target_id, score FROM match_proposals WHERE message_id = ? AND status = 'pending'",
                (str(reaction.message.id),)
            ) as cursor:
                match_data = await cursor.fetchone()
            
            if not match_data:
                return  # Pas un message de match ou d√©j√† trait√©
            
            requester_id, target_id, score = match_data
            
            # V√©rifier que c'est le bon utilisateur qui r√©agit
            if str(user.id) != requester_id:
                return
            
            if str(reaction.emoji) == '‚úÖ':
                # Accepter la correspondance
                await self.handle_match_acceptance(user, target_id, score, reaction.message.id)
            elif str(reaction.emoji) == '‚ùå':
                # Refuser la correspondance
                await self.handle_match_rejection(user, target_id, reaction.message.id)
                
        except Exception as e:
            print(f"‚ùå Erreur gestion r√©action: {e}")
    
    async def handle_match_acceptance(self, accepter_user, target_id: str, score: float, message_id: int):
        """G√©rer l'acceptation d'une correspondance"""
        try:
            # R√©cup√©rer les profils
            async with db_instance.connection.execute(
                "SELECT prenom FROM profiles WHERE user_id = ?", 
                (str(accepter_user.id),)
            ) as cursor:
                accepter_profile = await cursor.fetchone()
            
            async with db_instance.connection.execute(
                "SELECT prenom FROM profiles WHERE user_id = ?", 
                (target_id,)
            ) as cursor:
                target_profile = await cursor.fetchone()
            
            if not accepter_profile or not target_profile:
                return
            
            # Marquer le match comme accept√©
            await db_instance.connection.execute(
                "UPDATE match_proposals SET status = 'accepted' WHERE message_id = ?",
                (str(message_id),)
            )
            await db_instance.connection.commit()
            
            # Notifier l'autre utilisateur
            try:
                target_user = await self.bot.fetch_user(int(target_id))
                if target_user:
                    dm_channel = await target_user.create_dm()
                    
                    embed = discord.Embed(
                        title="üíù Correspondance accept√©e !",
                        description=f"**{accepter_profile[0]}** a accept√© votre correspondance !",
                        color=discord.Color.green()
                    )
                    
                    embed.add_field(
                        name="üéâ F√©licitations !",
                        value="Vous pouvez maintenant entrer en contact avec cette personne.\n"
                              "Nous vous encourageons √† faire connaissance dans un environnement s√ªr !",
                        inline=False
                    )
                    
                    embed.add_field(
                        name="üõ°Ô∏è Conseils de s√©curit√©",
                        value="‚Ä¢ Restez respectueux dans vos √©changes\n"
                              "‚Ä¢ Ne partagez pas d'informations personnelles sensibles\n" 
                              "‚Ä¢ Signalez tout comportement inappropri√©",
                        inline=False
                    )
                    
                    await dm_channel.send(embed=embed)
                    
            except Exception as notification_error:
                print(f"‚ùå Erreur notification acceptation: {notification_error}")
            
            # Confirmer √† celui qui a accept√©
            try:
                dm_channel = await accepter_user.create_dm()
                await dm_channel.send(
                    f"‚úÖ **Correspondance accept√©e !**\n\n"
                    f"J'ai notifi√© **{target_profile[0]}** que vous avez accept√© la correspondance. "
                    f"Bonne chance pour la suite ! üçÄ"
                )
            except:
                pass
                
        except Exception as e:
            print(f"‚ùå Erreur handle_match_acceptance: {e}")
    
    async def handle_match_rejection(self, rejecter_user, target_id: str, message_id: int):
        """G√©rer le refus d'une correspondance"""
        try:
            # Marquer le match comme refus√©
            await db_instance.connection.execute(
                "UPDATE match_proposals SET status = 'rejected' WHERE message_id = ?",
                (str(message_id),)
            )
            await db_instance.connection.commit()
            
            # Confirmer √† celui qui a refus√©
            try:
                dm_channel = await rejecter_user.create_dm()
                await dm_channel.send(
                    "‚ùå **Correspondance refus√©e.**\n\n"
                    "Utilisez `/findmatch` √† nouveau pour voir d'autres suggestions !"
                )
            except:
                pass
                
        except Exception as e:
            print(f"‚ùå Erreur handle_match_rejection: {e}")

async def setup(bot):
    """Fonction obligatoire pour charger le cog"""
    await bot.add_cog(Match(bot))