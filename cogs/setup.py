import discord
from discord.ext import commands
from discord import app_commands
from datetime import datetime

class Setup(commands.Cog):
    """Cog pour les commandes de configuration et d'aide"""

    def __init__(self, bot):
        self.bot = bot

    @app_commands.command(name="help", description="Guide complet du Matching Bot")
    async def help_command(self, interaction: discord.Interaction):
        """Affiche l'aide compl√®te du bot"""

        embed = discord.Embed(
            title="ü§ñ Guide du Matching Bot",
            description="Bot de rencontre s√©curis√© avec syst√®me de double opt-in",
            color=discord.Color.blue()
        )

        # Commandes principales
        embed.add_field(
            name="üìã Commandes Profil",
            value=(
                "`/createprofile` - Cr√©er/modifier votre profil\n"
                "`/viewprofile` - Voir votre profil ou celui d'un autre\n"
                "`/deleteprofile` - Supprimer d√©finitivement votre profil"
            ),
            inline=False
        )

        embed.add_field(
            name="üíñ Commandes Matching",
            value=(
                "`/findmatch` - Trouver des correspondances compatibles\n"
                "`/report_profile` - Signaler un profil inappropri√©"
            ),
            inline=False
        )

        embed.add_field(
            name="üîß Commandes Admin",
            value=(
                "`/stats` - Statistiques du bot\n"
                "`/list_profiles` - Liste des profils\n"
                "`/export_profiles` - Export JSON des profils\n"
                "`/consultsignal` - Voir les signalements"
            ),
            inline=False
        )

        # Informations de s√©curit√©
        embed.add_field(
            name="üõ°Ô∏è S√©curit√© & Confidentialit√©",
            value=(
                "‚Ä¢ **Protection mineurs** : S√©paration absolue mineur/majeur\n"
                "‚Ä¢ **Double opt-in** : Les deux personnes doivent accepter\n"
                "‚Ä¢ **Anonymat initial** : Identit√© r√©v√©l√©e apr√®s accord mutuel\n"
                "‚Ä¢ **Historique intelligent** : √âvite les r√©p√©titions\n"
                "‚Ä¢ **Auto-nettoyage** : Donn√©es effac√©es apr√®s 18 jours"
            ),
            inline=False
        )

        # Comment commencer
        embed.add_field(
            name="üöÄ Comment commencer ?",
            value=(
                "1Ô∏è‚É£ Cr√©ez votre profil avec `/createprofile`\n"
                "2Ô∏è‚É£ Cherchez des correspondances avec `/findmatch`\n"
                "3Ô∏è‚É£ Acceptez ou passez les suggestions re√ßues\n"
                "4Ô∏è‚É£ Si match mutuel, vous serez mis en contact !"
            ),
            inline=False
        )

        embed.set_footer(
            text="üí° Toutes les interactions sont priv√©es et s√©curis√©es ‚Ä¢ Version 2.1"
        )

        await interaction.response.send_message(embed=embed, ephemeral=True)

    @app_commands.command(name="setup", description="[ADMIN] Configurer le canal de pr√©sentation du bot")
    @app_commands.describe(channel="Canal o√π le bot postera ses informations")
    async def setup(self, interaction: discord.Interaction, channel: discord.TextChannel):
        """Configurer le canal o√π le bot postera son guide d'utilisation"""

        # V√©rifier les permissions d'administrateur
        if not (interaction.user.guild_permissions.administrator or await self.bot.is_owner(interaction.user)):
            await interaction.response.send_message(
                "‚ùå Cette commande est r√©serv√©e aux administrateurs du serveur.",
                ephemeral=True
            )
            return

        try:
            from .utils import db_instance

            # Cr√©er la table de configuration si elle n'existe pas
            await db_instance.connection.execute("""
                CREATE TABLE IF NOT EXISTS server_config (
                    guild_id TEXT PRIMARY KEY,
                    setup_channel_id TEXT,
                    created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                    updated_at TEXT DEFAULT CURRENT_TIMESTAMP
                )
            """)

            # Sauvegarder la configuration
            await db_instance.connection.execute("""
                INSERT OR REPLACE INTO server_config (guild_id, setup_channel_id, updated_at)
                VALUES (?, ?, ?)
            """, (str(interaction.guild.id), str(channel.id), datetime.now().isoformat()))

            await db_instance.connection.commit()

            # Envoyer la pr√©sentation compl√®te dans le canal
            await self.send_bot_presentation(channel)

            await interaction.response.send_message(
                f"‚úÖ **Configuration termin√©e !**\n\n"
                f"Canal configur√© : {channel.mention}\n"
                f"Le guide d'utilisation a √©t√© post√© dans le canal.\n\n"
                f"Les utilisateurs peuvent maintenant d√©couvrir le bot ! üöÄ",
                ephemeral=True
            )

        except Exception as e:
            print(f"‚ùå Erreur setup: {e}")
            await interaction.response.send_message(
                "‚ùå Une erreur s'est produite lors de la configuration.",
                ephemeral=True
            )

    async def send_bot_presentation(self, channel: discord.TextChannel):
        """Pr√©sentation du bot dans le canal configur√©"""
        try:
            embed = discord.Embed(
                title="ü§ñ Matching Bot - Rencontres S√©curis√©es",
                description="Trouvez des personnes compatibles gr√¢ce √† notre IA de matching !",
                color=discord.Color.blue()
            )

            embed.add_field(
                name="üöÄ Commencer",
                value="`/createprofile` puis `/findmatch`",
                inline=True
            )

            embed.add_field(
                name="üõ°Ô∏è S√©curit√©",
                value="Double opt-in ‚Ä¢ Protection mineurs ‚Ä¢ Anonymat",
                inline=True
            )

            embed.add_field(
                name="üí° Aide",
                value="`/help` pour plus d'informations",
                inline=True
            )

            embed.add_field(
                name="üéØ Fonctionnalit√©s",
                value=(
                    "‚Ä¢ **Algorithme intelligent** : Compatibilit√© bas√©e sur les int√©r√™ts\n"
                    "‚Ä¢ **Historique smart** : Jamais les m√™mes suggestions\n"
                    "‚Ä¢ **Auto-nettoyage** : Donn√©es effac√©es apr√®s 18 jours\n"
                    "‚Ä¢ **Syst√®me de signalement** int√©gr√©"
                ),
                inline=False
            )

            embed.set_footer(text="Utilisez /help pour le guide complet ‚Ä¢ Bot s√©curis√© et confidentiel")

            await channel.send(embed=embed)
            print(f"‚úÖ Pr√©sentation envoy√©e dans {channel.name}")

        except Exception as e:
            print(f"‚ùå Erreur pr√©sentation: {e}")
            raise

async def setup(bot):
    """Fonction obligatoire pour charger le cog"""
    await bot.add_cog(Setup(bot))