
import discord
from discord.ext import commands
from discord import app_commands
from datetime import datetime

class Setup(commands.Cog):
    """Cog pour les commandes de configuration initiale"""

    def __init__(self, bot):
        self.bot = bot

    @app_commands.command(name="help", description="Affiche l'aide et les commandes disponibles")
    async def help_command(self, interaction: discord.Interaction):
        """Affiche l'aide compl√®te du bot"""
        
        embed = discord.Embed(
            title="ü§ñ Guide du Matching Bot",
            description="Bot de rencontre s√©curis√© avec syst√®me de double opt-in",
            color=discord.Color.blue()
        )
        
        # Commandes principales
        embed.add_field(
            name="üìã Commandes Profil",
            value=(
                "`/createprofile` - Cr√©er/modifier votre profil\n"
                "`/viewprofile` - Voir votre profil ou celui d'un autre\n"
                "`/deleteprofile` - Supprimer d√©finitivement votre profil"
            ),
            inline=False
        )
        
        embed.add_field(
            name="üíñ Commandes Matching",
            value=(
                "`/findmatch` - Trouver des correspondances compatibles\n"
                "`/report_profile` - Signaler un profil inappropri√©"
            ),
            inline=False
        )
        
        embed.add_field(
            name="üîß Commandes Admin",
            value=(
                "`/stats` - Statistiques du bot\n"
                "`/list_profiles` - Liste des profils\n"
                "`/export_profiles` - Export JSON des profils\n"
                "`/consultsignal` - Voir les signalements\n"
                "`/deleteprofileadmin` - Supprimer un profil (admin)"
            ),
            inline=False
        )
        
        # Informations de s√©curit√©
        embed.add_field(
            name="üõ°Ô∏è S√©curit√© & Confidentialit√©",
            value=(
                "‚Ä¢ **Protection mineurs** : S√©paration absolue mineur/majeur\n"
                "‚Ä¢ **Double opt-in** : Les deux personnes doivent accepter\n"
                "‚Ä¢ **Anonymat initial** : Identit√© r√©v√©l√©e apr√®s accord mutuel\n"
                "‚Ä¢ **Signalement** : Syst√®me de mod√©ration int√©gr√©"
            ),
            inline=False
        )
        
        # Comment commencer
        embed.add_field(
            name="üöÄ Comment commencer ?",
            value=(
                "1Ô∏è‚É£ Cr√©ez votre profil avec `/createprofile`\n"
                "2Ô∏è‚É£ Cherchez des correspondances avec `/findmatch`\n"
                "3Ô∏è‚É£ Acceptez ou passez les suggestions re√ßues\n"
                "4Ô∏è‚É£ Si match mutuel, vous serez mis en contact !"
            ),
            inline=False
        )
        
        embed.set_footer(
            text="üí° Toutes les interactions sont priv√©es et s√©curis√©es ‚Ä¢ Version 2.0"
        )
        
        await interaction.response.send_message(embed=embed, ephemeral=True)

    @app_commands.command(name="about", description="Informations sur le bot et ses fonctionnalit√©s")
    async def about(self, interaction: discord.Interaction):
        """Informations d√©taill√©es sur le bot"""
        
        embed = discord.Embed(
            title="‚ÑπÔ∏è √Ä propos du Matching Bot",
            description="Bot de rencontre nouvelle g√©n√©ration pour Discord",
            color=discord.Color.green()
        )
        
        embed.add_field(
            name="üéØ Objectif",
            value="Faciliter les rencontres s√©curis√©es et respectueuses entre utilisateurs Discord avec des centres d'int√©r√™t communs.",
            inline=False
        )
        
        embed.add_field(
            name="üß† Algorithme de Matching",
            value=(
                "‚Ä¢ **Similarit√© d'int√©r√™ts** : Analyse TF-IDF avanc√©e\n"
                "‚Ä¢ **Compatibilit√© d'√¢ge** : Fonction gaussienne adapt√©e\n"
                "‚Ä¢ **Score composite** : Pond√©ration intelligente\n"
                "‚Ä¢ **Filtres de s√©curit√©** : Protection automatique"
            ),
            inline=False
        )
        
        embed.add_field(
            name="üîí S√©curit√©",
            value=(
                "‚Ä¢ **S√©paration d'√¢ge** : Mineurs et majeurs s√©par√©s\n"
                "‚Ä¢ **Double consentement** : Accord mutuel obligatoire\n"
                "‚Ä¢ **Anonymat** : R√©v√©lation progressive d'identit√©\n"
                "‚Ä¢ **Mod√©ration** : Syst√®me de signalement int√©gr√©"
            ),
            inline=False
        )
        
        embed.add_field(
            name="üìä Statistiques",
            value=f"‚Ä¢ **Serveurs** : {len(self.bot.guilds)}\n‚Ä¢ **Latence** : {round(self.bot.latency * 1000)}ms\n‚Ä¢ **Version** : 2.0",
            inline=True
        )
        
        embed.add_field(
            name="‚ö° Performance",
            value="‚Ä¢ **Base de donn√©es** : SQLite optimis√©e\n‚Ä¢ **Cache intelligent** : R√©ponses ultra-rapides\n‚Ä¢ **Async** : Architecture moderne",
            inline=True
        )
        
        embed.set_footer(text="D√©velopp√© avec ‚ù§Ô∏è ‚Ä¢ discord.py ‚Ä¢ Open Source")
        
        await interaction.response.send_message(embed=embed, ephemeral=True)

    @app_commands.command(name="privacy", description="Politique de confidentialit√© et gestion des donn√©es")
    async def privacy(self, interaction: discord.Interaction):
        """Affiche la politique de confidentialit√©"""
        
        embed = discord.Embed(
            title="üîê Politique de Confidentialit√©",
            description="Comment nous prot√©geons vos donn√©es personnelles",
            color=discord.Color.purple()
        )
        
        embed.add_field(
            name="üìã Donn√©es Collect√©es",
            value=(
                "‚Ä¢ **Profil** : Pr√©nom, pronoms, √¢ge, int√©r√™ts, description\n"
                "‚Ä¢ **Avatar Discord** : Pour l'affichage du profil\n"
                "‚Ä¢ **ID Discord** : Pour l'identification unique\n"
                "‚Ä¢ **Interactions** : Historique de matching anonymis√©"
            ),
            inline=False
        )
        
        embed.add_field(
            name="üõ°Ô∏è Protection des Donn√©es",
            value=(
                "‚Ä¢ **Stockage local** : Base de donn√©es SQLite s√©curis√©e\n"
                "‚Ä¢ **Pas de revente** : Vos donn√©es ne sont jamais vendues\n"
                "‚Ä¢ **Acc√®s restreint** : Seuls les admins autoris√©s\n"
                "‚Ä¢ **Chiffrement** : Communications s√©curis√©es"
            ),
            inline=False
        )
        
        embed.add_field(
            name="üé≠ Anonymat et R√©v√©lation",
            value=(
                "‚Ä¢ **Phase 1** : Profil anonyme (√¢ge, int√©r√™ts)\n"
                "‚Ä¢ **Phase 2** : Pr√©nom et pronoms r√©v√©l√©s\n"
                "‚Ä¢ **Phase 3** : Contact Discord apr√®s double accord\n"
                "‚Ä¢ **Contr√¥le total** : Vous d√©cidez quoi partager"
            ),
            inline=False
        )
        
        embed.add_field(
            name="üóëÔ∏è Suppression des Donn√©es",
            value=(
                "‚Ä¢ **Droit √† l'oubli** : `/deleteprofile` supprime tout\n"
                "‚Ä¢ **Suppression imm√©diate** : Pas de conservation\n"
                "‚Ä¢ **Matches supprim√©s** : Toutes les correspondances effac√©es\n"
                "‚Ä¢ **Signalements supprim√©s** : Historique nettoy√©"
            ),
            inline=False
        )
        
        embed.add_field(
            name="üë∂ Protection des Mineurs",
            value=(
                "‚Ä¢ **S√©paration totale** : Mineurs et majeurs isol√©s\n"
                "‚Ä¢ **Filtre d'√¢ge** : Algorithme de protection automatique\n"
                "‚Ä¢ **Surveillance renforc√©e** : Mod√©ration prioritaire\n"
                "‚Ä¢ **Signalement facilit√©** : Bouton dans chaque profil"
            ),
            inline=False
        )
        
        embed.set_footer(text="Contact admin pour questions ‚Ä¢ Derni√®re mise √† jour: 2024")
        
        await interaction.response.send_message(embed=embed, ephemeral=True)

    @app_commands.command(name="setup_channel", description="[ADMIN] Configurer le canal de pr√©sentation du bot")
    @app_commands.describe(channel="Canal o√π le bot postera ses informations")
    async def setup_channel(self, interaction: discord.Interaction, channel: discord.TextChannel):
        """Configurer le canal o√π le bot postera son guide d'utilisation"""
        
        # V√©rifier les permissions d'administrateur
        if not (interaction.user.guild_permissions.administrator or await self.bot.is_owner(interaction.user)):
            await interaction.response.send_message(
                "‚ùå Cette commande est r√©serv√©e aux administrateurs du serveur.",
                ephemeral=True
            )
            return
        
        try:
            from .utils import db_instance
            
            # Cr√©er la table de configuration si elle n'existe pas
            await db_instance.connection.execute("""
                CREATE TABLE IF NOT EXISTS server_config (
                    guild_id TEXT PRIMARY KEY,
                    setup_channel_id TEXT,
                    created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                    updated_at TEXT DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # Sauvegarder la configuration
            await db_instance.connection.execute("""
                INSERT OR REPLACE INTO server_config (guild_id, setup_channel_id, updated_at)
                VALUES (?, ?, ?)
            """, (str(interaction.guild.id), str(channel.id), datetime.now().isoformat()))
            
            await db_instance.connection.commit()
            
            # Envoyer le guide d'utilisation dans le canal
            await self.send_bot_guide(channel)
            
            await interaction.response.send_message(
                f"‚úÖ **Configuration termin√©e !**\n\n"
                f"Canal configur√© : {channel.mention}\n"
                f"Le guide d'utilisation a √©t√© post√© dans le canal.\n\n"
                f"Les utilisateurs peuvent maintenant d√©couvrir le bot ! üöÄ",
                ephemeral=True
            )
            
        except Exception as e:
            print(f"‚ùå Erreur setup_channel: {e}")
            await interaction.response.send_message(
                "‚ùå Une erreur s'est produite lors de la configuration.",
                ephemeral=True
            )

    @app_commands.command(name="update_info", description="[ADMIN] Mettre √† jour le guide dans le canal configur√©")
    async def update_info(self, interaction: discord.Interaction):
        """Mettre √† jour le guide d'utilisation dans le canal configur√©"""
        
        # V√©rifier les permissions d'administrateur
        if not (interaction.user.guild_permissions.administrator or await self.bot.is_owner(interaction.user)):
            await interaction.response.send_message(
                "‚ùå Cette commande est r√©serv√©e aux administrateurs du serveur.",
                ephemeral=True
            )
            return
        
        try:
            from .utils import db_instance
            
            # R√©cup√©rer la configuration du serveur
            async with db_instance.connection.execute(
                "SELECT setup_channel_id FROM server_config WHERE guild_id = ?",
                (str(interaction.guild.id),)
            ) as cursor:
                config = await cursor.fetchone()
            
            if not config or not config[0]:
                await interaction.response.send_message(
                    "‚ùå Aucun canal configur√©. Utilisez `/setup_channel` d'abord.",
                    ephemeral=True
                )
                return
            
            # R√©cup√©rer le canal
            channel = self.bot.get_channel(int(config[0]))
            if not channel:
                await interaction.response.send_message(
                    "‚ùå Canal configur√© introuvable. Utilisez `/setup_channel` pour le reconfigurer.",
                    ephemeral=True
                )
                return
            
            # Envoyer le guide mis √† jour
            await self.send_bot_guide(channel)
            
            await interaction.response.send_message(
                f"‚úÖ **Guide mis √† jour !**\n\n"
                f"Le guide d'utilisation a √©t√© mis √† jour dans {channel.mention}.",
                ephemeral=True
            )
            
        except Exception as e:
            print(f"‚ùå Erreur update_info: {e}")
            await interaction.response.send_message(
                "‚ùå Une erreur s'est produite lors de la mise √† jour.",
                ephemeral=True
            )

    async def send_bot_guide(self, channel: discord.TextChannel):
        """Envoyer le guide complet d'utilisation du bot dans un canal"""
        try:
            # Embed principal de pr√©sentation
            main_embed = discord.Embed(
                title="ü§ñ Bienvenue sur le Matching Bot !",
                description="**Bot de rencontre s√©curis√© avec syst√®me de double opt-in**\n\n"
                           "Trouvez des personnes compatibles avec vos centres d'int√©r√™t gr√¢ce √† notre algorithme IA avanc√© !",
                color=discord.Color.blue()
            )
            
            main_embed.add_field(
                name="üöÄ Pour commencer",
                value="1Ô∏è‚É£ Utilisez `/createprofile` pour cr√©er votre profil\n"
                      "2Ô∏è‚É£ Utilisez `/findmatch` pour trouver des correspondances\n"
                      "3Ô∏è‚É£ Acceptez ou passez les suggestions re√ßues en DM\n"
                      "4Ô∏è‚É£ Si match mutuel, vous serez mis en contact !",
                inline=False
            )
            
            main_embed.add_field(
                name="üõ°Ô∏è S√©curit√© Garantie",
                value="‚Ä¢ **Protection mineurs** : S√©paration absolue mineur/majeur\n"
                      "‚Ä¢ **Anonymat initial** : Identit√© r√©v√©l√©e apr√®s accord mutuel\n"
                      "‚Ä¢ **Double validation** : Les deux personnes doivent accepter\n"
                      "‚Ä¢ **Signalement** : Syst√®me de mod√©ration int√©gr√©",
                inline=False
            )
            
            main_embed.set_footer(text="üí° Toutes les commandes sont priv√©es et s√©curis√©es")
            
            await channel.send(embed=main_embed)
            
            # Embed des commandes
            commands_embed = discord.Embed(
                title="üìã Liste des Commandes",
                color=discord.Color.green()
            )
            
            commands_embed.add_field(
                name="üë§ Gestion de Profil",
                value="`/createprofile` - Cr√©er votre profil\n"
                      "`/viewprofile` - Voir votre profil\n"
                      "`/deleteprofile` - Supprimer votre profil",
                inline=True
            )
            
            commands_embed.add_field(
                name="üíñ Matching",
                value="`/findmatch` - Chercher des correspondances\n"
                      "`/report_profile` - Signaler un profil",
                inline=True
            )
            
            commands_embed.add_field(
                name="‚ÑπÔ∏è Aide",
                value="`/help` - Guide complet\n"
                      "`/about` - √Ä propos du bot\n"
                      "`/privacy` - Confidentialit√©",
                inline=True
            )
            
            await channel.send(embed=commands_embed)
            
            # Embed de l'algorithme
            algo_embed = discord.Embed(
                title="üß† Notre Algorithme IA",
                description="Comment nous trouvons vos correspondances parfaites",
                color=discord.Color.purple()
            )
            
            algo_embed.add_field(
                name="üéØ Analyse des Int√©r√™ts",
                value="‚Ä¢ **TF-IDF avanc√©** : Pond√©ration intelligente\n"
                      "‚Ä¢ **Fuzzy matching** : D√©tection de similitudes\n"
                      "‚Ä¢ **Synonymes** : Reconnaissance de termes √©quivalents",
                inline=False
            )
            
            algo_embed.add_field(
                name="üìä Score de Compatibilit√©",
                value="‚Ä¢ **Int√©r√™ts communs** : 55% du score\n"
                      "‚Ä¢ **Compatibilit√© d'√¢ge** : 20% du score\n"
                      "‚Ä¢ **Personnalit√©** : 25% du score\n\n"
                      "Score minimum pour suggestion : **60%**",
                inline=False
            )
            
            await channel.send(embed=algo_embed)
            
            print(f"‚úÖ Guide envoy√© dans {channel.name} ({channel.id})")
            
        except Exception as e:
            print(f"‚ùå Erreur send_bot_guide: {e}")
            raise

async def setup(bot):
    """Fonction obligatoire pour charger le cog"""
    await bot.add_cog(Setup(bot))
