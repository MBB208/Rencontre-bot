
import discord
from discord.ext import commands
from discord import app_commands
from datetime import datetime
from .utils import db_instance, logger

class Setup(commands.Cog):
    """Commandes de configuration du bot"""

    def __init__(self, bot):
        self.bot = bot

    @app_commands.command(name="setup_bot", description="[ADMIN] Initialiser le bot et v√©rifier la configuration")
    @app_commands.default_permissions(administrator=True)
    async def setup_bot(self, interaction: discord.Interaction):
        """Commande d'initialisation du bot"""
        await interaction.response.defer(ephemeral=True)

        try:
            # V√©rifier la connexion DB
            if not await db_instance.is_connected():
                await db_instance.connect()

            # V√©rifier les tables
            await db_instance.create_tables()

            # Compter les profils existants
            async with db_instance.connection.execute("SELECT COUNT(*) FROM profiles") as cursor:
                profile_count = (await cursor.fetchone())[0]

            # Compter les matches
            async with db_instance.connection.execute("SELECT COUNT(*) FROM matches") as cursor:
                match_count = (await cursor.fetchone())[0]

            # V√©rifier les cogs charg√©s
            cog_status = []
            for cog_name in ['setup', 'profile', 'match', 'admin']:
                if f'cogs.{cog_name}' in self.bot.cogs:
                    cog_status.append(f"‚úÖ {cog_name}")
                else:
                    cog_status.append(f"‚ùå {cog_name}")

            embed = discord.Embed(
                title="ü§ñ Matching Bot - Configuration Syst√®me",
                description="**Configuration et diagnostic complet du bot**\n\n*Bot de rencontres intelligent avec protection des mineurs*",
                color=discord.Color.green(),
                timestamp=datetime.now()
            )

            embed.add_field(
                name="üìä Statistiques Actuelles",
                value=f"üë• **Profils actifs:** {profile_count}\nüíï **Matches cr√©√©s:** {match_count}\nüéØ **Taux de r√©ussite:** {'Calcul√© apr√®s 10+ profils' if profile_count < 10 else f'{(match_count/profile_count*100):.1f}%'}",
                inline=True
            )

            embed.add_field(
                name="üîß √âtat des Composants",
                value=f"üóÑÔ∏è **Base de donn√©es:** ‚úÖ Connect√©e\nüìã **Tables:** ‚úÖ Initialis√©es\n‚öôÔ∏è **Cogs:** {len([c for c in cog_status if '‚úÖ' in c])}/4 charg√©s",
                inline=True
            )

            embed.add_field(
                name="üèóÔ∏è Modules Charg√©s",
                value="\n".join(cog_status),
                inline=True
            )

            embed.add_field(
                name="üöÄ Commandes Principales",
                value="üÜï `/createprofile` - Cr√©er son profil\nüîç `/findmatch` - Trouver des correspondances\nüìä `/match_stats` - Voir ses statistiques\nüîÑ `/reset_passes` - R√©initialiser les profils pass√©s",
                inline=False
            )

            embed.add_field(
                name="üõ°Ô∏è S√©curit√© & Mod√©ration",
                value="üîí **Protection mineurs:** S√©gr√©gation stricte\nüö® **Signalements:** Syst√®me int√©gr√©\nüëÆ **Admin:** `/admin_reports`, `/list_profiles`\nüßπ **Nettoyage:** Automatique toutes les heures",
                inline=False
            )

            embed.add_field(
                name="üìà Algorithme de Matching",
                value="üéØ **Compatibilit√©:** Int√©r√™ts (60%) + √Çge (25%) + Description (15%)\nüîç **Synonymes:** D√©tection automatique\n‚öñÔ∏è **Filtres:** √Çge max 12 ans d'√©cart\nüõ°Ô∏è **Seuil minimum:** 10% de compatibilit√©",
                inline=False
            )

            embed.set_footer(
                text="üéâ Bot op√©rationnel ‚Ä¢ Pr√™t pour les utilisateurs ‚Ä¢ /info pour plus d'infos",
                icon_url=self.bot.user.avatar.url if self.bot.user.avatar else None
            )

            await interaction.followup.send(embed=embed, ephemeral=True)

        except Exception as e:
            logger.error(f"‚ùå Erreur setup_bot: {e}")
            await interaction.followup.send(
                f"‚ùå Erreur lors de la configuration: {str(e)}",
                ephemeral=True
            )

    @app_commands.command(name="info", description="Informations sur le bot")
    async def info(self, interaction: discord.Interaction):
        """Afficher les informations du bot"""
        embed = discord.Embed(
            title="ü§ñ Matching Bot Discord",
            description="Bot de rencontres avec syst√®me de compatibilit√© intelligent",
            color=discord.Color.blue()
        )

        embed.add_field(
            name="‚ú® Fonctionnalit√©s",
            value="‚Ä¢ Cr√©ation de profils\n‚Ä¢ Matching intelligent\n‚Ä¢ Syst√®me anonyme\n‚Ä¢ Protection des mineurs",
            inline=True
        )

        embed.add_field(
            name="üîß Commandes",
            value="‚Ä¢ `/createprofile`\n‚Ä¢ `/findmatch`\n‚Ä¢ `/match_stats`\n‚Ä¢ `/reset_passes`",
            inline=True
        )

        embed.add_field(
            name="üõ°Ô∏è S√©curit√©",
            value="‚Ä¢ S√©gr√©gation √¢ge\n‚Ä¢ Signalement int√©gr√©\n‚Ä¢ Mod√©ration active",
            inline=False
        )

        embed.set_footer(text="Utilisez /createprofile pour commencer !")

        await interaction.response.send_message(embed=embed)

async def setup(bot):
    """Fonction de setup du cog"""
    await bot.add_cog(Setup(bot))
