"""
Syst√®me de suggestions proactives automatiques
Envoie des suggestions de matching automatiquement selon la configuration
"""
import discord
from discord.ext import commands, tasks
import json
import asyncio
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import aiosqlite

from .utils_match import (
    compute_match_score, generate_nonce, is_minor_major_mix,
    format_age_range, truncate_description, get_top_interests
)

class ProactiveMatching(commands.Cog):
    """Syst√®me de suggestions proactives automatiques"""


class MatchProactive(commands.Cog):
    """Syst√®me de suggestions proactives automatiques"""
    
    def __init__(self, bot):
        self.bot = bot
        self.proactive_task = None
        self.config = {
            "enabled": False,
            "interval_minutes": 60,
            "max_daily_suggestions": 3,
            "cooldown_hours": 24,
            "min_activity_score": 0.5
        }
    
    async def is_admin(self, interaction: discord.Interaction) -> bool:
        """V√©rifier si l'utilisateur est administrateur"""
        # Propri√©taire du bot
        if await self.bot.is_owner(interaction.user):
            return True
        
        # V√©rifier les permissions d'administrateur
        if interaction.guild and interaction.user.guild_permissions.administrator:
            return True
            
        return False
    
    @discord.app_commands.command(name="config_proactive", description="[ADMIN] Configurer le syst√®me de suggestions automatiques")
    @discord.app_commands.describe(
        enabled="Activer/d√©sactiver le syst√®me proactif",
        interval="Intervalle en minutes entre les cycles (d√©faut: 60)",
        max_daily="Nombre max de suggestions par utilisateur par jour (d√©faut: 3)"
    )
    async def config_proactive(
        self,
        interaction: discord.Interaction,
        enabled: bool = None,
        interval: int = None,
        max_daily: int = None
    ):
        """Configurer le syst√®me de suggestions proactives (admin uniquement)"""
        
        # V√©rification STRICTE des permissions d'administration
        if not await self.is_admin(interaction):
            await interaction.response.send_message(
                "‚ùå Cette commande est r√©serv√©e aux administrateurs du serveur uniquement.",
                ephemeral=True
            )
            return
        
        try:
            # Mettre √† jour la configuration si des param√®tres sont fournis
            if enabled is not None:
                self.config["enabled"] = enabled
                if enabled:
                    await self.start_proactive_task()
                else:
                    await self.stop_proactive_task()
            
            if interval is not None:
                if interval < 1 or interval > 1440:  # Entre 1 minute et 24h
                    await interaction.response.send_message(
                        "‚ùå L'intervalle doit √™tre entre 1 et 1440 minutes.",
                        ephemeral=True
                    )
                    return
                self.config["interval_minutes"] = interval
            
            if max_daily is not None:
                if max_daily < 1 or max_daily > 10:
                    await interaction.response.send_message(
                        "‚ùå Le nombre max de suggestions doit √™tre entre 1 et 10.",
                        ephemeral=True
                    )
                    return
                self.config["max_daily_suggestions"] = max_daily
            
            # Afficher la configuration actuelle
            embed = discord.Embed(
                title="‚öôÔ∏è Configuration du Syst√®me Proactif",
                color=discord.Color.blue()
            )
            
            status_icon = "üü¢" if self.config["enabled"] else "üî¥"
            embed.add_field(
                name="√âtat",
                value=f"{status_icon} {'Activ√©' if self.config['enabled'] else 'D√©sactiv√©'}",
                inline=True
            )
            
            embed.add_field(
                name="Intervalle",
                value=f"{self.config['interval_minutes']} minutes",
                inline=True
            )
            
            embed.add_field(
                name="Max quotidien",
                value=f"{self.config['max_daily_suggestions']} suggestions/utilisateur",
                inline=True
            )
            
            await interaction.response.send_message(embed=embed, ephemeral=True)
            print(f"üîß ADMIN CONFIG: {interaction.user.id} a modifi√© la config proactive")
            
        except Exception as e:
            print(f"‚ùå Erreur config_proactive: {e}")
            await interaction.response.send_message(
                "‚ùå Erreur lors de la configuration.",
                ephemeral=True
            )
    
    async def start_proactive_task(self):
        """D√©marrer la t√¢che proactive"""
        if self.proactive_task and not self.proactive_task.done():
            self.proactive_task.cancel()
        
        self.proactive_task = asyncio.create_task(self.proactive_loop())
        print(f"üöÄ Syst√®me proactif d√©marr√© (intervalle: {self.config['interval_minutes']} min)")
    
    async def stop_proactive_task(self):
        """Arr√™ter la t√¢che proactive"""
        if self.proactive_task and not self.proactive_task.done():
            self.proactive_task.cancel()
            print("‚èπÔ∏è Syst√®me proactif arr√™t√©")
    
    async def proactive_loop(self):
        """Boucle principale du syst√®me proactif"""
        while self.config["enabled"]:
            try:
                await self.send_proactive_suggestions()
                await asyncio.sleep(self.config["interval_minutes"] * 60)
            except asyncio.CancelledError:
                break
            except Exception as e:
                print(f"‚ùå Erreur dans la boucle proactive: {e}")
                await asyncio.sleep(300)  # Attendre 5 minutes en cas d'erreur
    
    async def send_proactive_suggestions(self):
        """Envoyer des suggestions proactives aux utilisateurs √©ligibles"""
        # Impl√©mentation √† venir
        print("üì§ Envoi de suggestions proactives...")

async def setup(bot):
    """Fonction obligatoire pour charger le cog"""
    await bot.add_cog(MatchProactive(bot))


    def __init__(self, bot):
        self.bot = bot
        self.config = {
            "enabled": False,
            "interval_minutes": 60,  # V√©rification toutes les heures
            "cooldown_hours": 24,    # 24h entre suggestions pour un utilisateur
            "max_per_user_per_day": 3,
            "min_activity_score": 0.5
        }
        self.idf_cache = {}

    async def cog_load(self):
        """D√©marrage du syst√®me proactif"""
        # Le loop sera d√©marr√© manuellement via commande admin
        pass

    def start_proactive_loop(self):
        """D√©marre la boucle de suggestions proactives"""
        if not self.proactive_loop.is_running() and self.config["enabled"]:
            self.proactive_loop.start()

    def stop_proactive_loop(self):
        """Arr√™te la boucle de suggestions proactives"""
        if self.proactive_loop.is_running():
            self.proactive_loop.cancel()

    @tasks.loop(minutes=60)  # Par d√©faut, sera ajust√© par config
    async def proactive_loop(self):
        """Boucle principale des suggestions proactives"""
        if not self.config["enabled"]:
            return

        try:
            print("üîÑ D√©marrage cycle suggestions proactives")
            eligible_users = await self.get_eligible_users()

            for user_id in eligible_users:
                try:
                    await self.send_proactive_suggestion(user_id)
                    await asyncio.sleep(2)  # √âviter le rate limit
                except Exception as e:
                    print(f"‚ùå Erreur suggestion proactive pour {user_id}: {e}")

            print(f"‚úÖ Cycle termin√©: {len(eligible_users)} suggestions envoy√©es")

        except json.JSONDecodeError as e:
            print(f"‚ùå Erreur JSON lors des suggestions proactives: R√©ponse vide ou invalide")
        except Exception as e:
            print(f"‚ùå Erreur boucle proactive: {e}")

    @proactive_loop.before_loop
    async def before_proactive_loop(self):
        """Attendre que le bot soit pr√™t"""
        await self.bot.wait_until_ready()

    async def get_eligible_users(self) -> List[str]:
        """Trouve les utilisateurs √©ligibles pour des suggestions proactives"""
        from .utils import db_instance
        eligible = []

        try:
            # R√©cup√©rer les utilisateurs avec profils complets
            async with db_instance.connection.execute("""
                SELECT user_id, prefs, activity_score, created_at 
                FROM profiles 
                WHERE activity_score >= ?
            """, (self.config["min_activity_score"],)) as cursor:

                async for row in cursor:
                    user_id, prefs_json, activity_score, created_at = row

                    # Parser les pr√©f√©rences
                    try:
                        prefs = json.loads(prefs_json or '{}')
                    except:
                        prefs = {}

                    # V√©rifier opt-out
                    if prefs.get('opt_out_proactive', False):
                        continue

                    # V√©rifier cooldown
                    if await self.user_in_cooldown(user_id):
                        continue

                    # V√©rifier limite quotidienne
                    if await self.user_exceeded_daily_limit(user_id):
                        continue

                    eligible.append(user_id)

            return eligible[:50]  # Limiter pour √©viter la surcharge

        except Exception as e:
            print(f"‚ùå Erreur get_eligible_users: {e}")
            return []

    async def user_in_cooldown(self, user_id: str) -> bool:
        """V√©rifie si l'utilisateur est en cooldown"""
        from .utils import db_instance

        cooldown_time = datetime.now() - timedelta(hours=self.config["cooldown_hours"])

        async with db_instance.connection.execute("""
            SELECT COUNT(*) FROM suggestions 
            WHERE user_id = ? AND created_at > ?
        """, (user_id, cooldown_time.isoformat())) as cursor:
            count = (await cursor.fetchone())[0]

        return count > 0

    async def user_exceeded_daily_limit(self, user_id: str) -> bool:
        """V√©rifie si l'utilisateur a d√©pass√© sa limite quotidienne"""
        from .utils import db_instance

        day_start = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)

        async with db_instance.connection.execute("""
            SELECT COUNT(*) FROM suggestions 
            WHERE user_id = ? AND created_at > ?
        """, (user_id, day_start.isoformat())) as cursor:
            count = (await cursor.fetchone())[0]

        return count >= self.config["max_per_user_per_day"]

    async def send_proactive_suggestion(self, user_id: str):
        """Envoie une suggestion proactive √† un utilisateur"""
        from .utils import db_instance

        try:
            # R√©cup√©rer le profil utilisateur
            async with db_instance.connection.execute(
                "SELECT * FROM profiles WHERE user_id = ?", (user_id,)
            ) as cursor:
                user_profile = await cursor.fetchone()

            if not user_profile:
                return

            # Trouver des candidats (utiliser la m√™me logique que match_advanced)
            candidates = await self.find_candidates_for_user(user_profile)

            if not candidates:
                return

            best_candidate = candidates[0]

            # R√©cup√©rer l'utilisateur Discord
            try:
                user = await self.bot.fetch_user(int(user_id))
            except:
                return

            # G√©n√©rer nonce et enregistrer suggestion
            nonce = generate_nonce()
            await db_instance.connection.execute("""
                INSERT INTO suggestions (user_id, candidate_id, status, nonce, score)
                VALUES (?, ?, 'pending', ?, ?)
            """, (user_id, best_candidate['profile']['user_id'], nonce, best_candidate['score']))

            await db_instance.connection.commit()

            # Envoyer DM proactif
            await self.send_proactive_dm(user, best_candidate, nonce)

        except Exception as e:
            print(f"‚ùå Erreur send_proactive_suggestion: {e}")

    async def find_candidates_for_user(self, user_profile) -> List[Dict]:
        """Trouve les candidats pour un utilisateur (m√™me logique que match_advanced)"""
        from .utils import db_instance
        from .match_advanced import MatchingSystem

        # R√©cup√©rer une instance du syst√®me de matching
        matching_cog = self.bot.get_cog('MatchingSystem')
        if matching_cog:
            return await matching_cog.find_candidates(user_profile)

        return []  # Fallback vide si cog non trouv√©

    async def send_proactive_dm(self, user: discord.User, candidate: Dict, nonce: str):
        """Envoie un DM de suggestion proactive"""
        try:
            dm_channel = await user.create_dm()
            candidate_profile = candidate['profile']

            # Pr√©parer embed proactif
            embed = discord.Embed(
                title="üíå Suggestion automatique !",
                description="J'ai trouv√© quelqu'un qui pourrait vous int√©resser :",
                color=discord.Color.purple()
            )

            interests_canonical = json.loads(candidate_profile.get('interets_canonical', '[]'))
            top_interests = get_top_interests(interests_canonical, 4)
            age_range = format_age_range(candidate_profile['age'])
            description = truncate_description(candidate_profile['description'], 120)

            embed.add_field(
                name="üë§ Aper√ßu",
                value=f"**√Çge :** {age_range}\n**Score :** {candidate['score']:.0%}",
                inline=True
            )

            embed.add_field(
                name="üé® Int√©r√™ts",
                value=top_interests,
                inline=True
            )

            embed.add_field(
                name="üí≠ Bio",
                value=description,
                inline=False
            )

            embed.set_footer(text="üí° Suggestion automatique ‚Ä¢ Profil anonymis√©")

            # Boutons proactifs
            view = ProactiveActionView(self, candidate_profile['user_id'], nonce)

            await dm_channel.send(embed=embed, view=view)

        except discord.Forbidden:
            print(f"‚ùå DM ferm√© pour suggestion proactive: {user.id}")
        except Exception as e:
            print(f"‚ùå Erreur send_proactive_dm: {e}")

    async def handle_proactive_accept(self, interaction: discord.Interaction, candidate_id: str, nonce: str):
        """G√®re l'acceptation d'une suggestion proactive"""
        # M√™me logique que match_accept dans match_advanced
        matching_cog = self.bot.get_cog('MatchingSystem')
        if matching_cog:
            await matching_cog.handle_match_accept(interaction, candidate_id, nonce)
        else:
            await interaction.response.send_message(
                "‚ùå Service de matching temporairement indisponible.",
                ephemeral=True
            )

    # Commandes admin pour contr√¥ler le syst√®me proactif
    @discord.app_commands.command(name="config_proactive", description="[ADMIN] Configurer le syst√®me proactif")
    @discord.app_commands.describe(
        enabled="Activer/d√©sactiver les suggestions proactives",
        interval="Intervalle en minutes entre les cycles",
        max_daily="Maximum de suggestions par utilisateur par jour"
    )
    async def config_proactive(
        self, 
        interaction: discord.Interaction,
        enabled: Optional[bool] = None,
        interval: Optional[int] = None,
        max_daily: Optional[int] = None
    ):
        """Configure le syst√®me de suggestions proactives"""

        # V√©rifier permissions admin (simple v√©rification)
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message(
                "‚ùå Seuls les administrateurs peuvent configurer le syst√®me proactif.",
                ephemeral=True
            )
            return

        changes = []

        if enabled is not None:
            old_enabled = self.config["enabled"]
            self.config["enabled"] = enabled
            changes.append(f"Activ√©: {old_enabled} ‚Üí {enabled}")

            if enabled and not self.proactive_loop.is_running():
                self.start_proactive_loop()
            elif not enabled and self.proactive_loop.is_running():
                self.stop_proactive_loop()

        if interval is not None and 10 <= interval <= 1440:  # Entre 10 min et 24h
            self.config["interval_minutes"] = interval
            changes.append(f"Intervalle: {interval} minutes")

            # Red√©marrer loop avec nouveau timing
            if self.proactive_loop.is_running():
                self.proactive_loop.cancel()
                self.proactive_loop.change_interval(minutes=interval)
                self.start_proactive_loop()

        if max_daily is not None and 1 <= max_daily <= 10:
            self.config["max_per_user_per_day"] = max_daily
            changes.append(f"Max quotidien: {max_daily}")

        if changes:
            await interaction.response.send_message(
                f"‚úÖ **Configuration mise √† jour:**\n" + "\n".join(changes),
                ephemeral=True
            )
        else:
            # Afficher config actuelle
            await interaction.response.send_message(
                f"‚öôÔ∏è **Configuration actuelle:**\n"
                f"‚Ä¢ Activ√©: {self.config['enabled']}\n"
                f"‚Ä¢ Intervalle: {self.config['interval_minutes']} min\n"
                f"‚Ä¢ Max quotidien: {self.config['max_per_user_per_day']}\n"
                f"‚Ä¢ Cooldown: {self.config['cooldown_hours']}h",
                ephemeral=True
            )

class ProactiveActionView(discord.ui.View):
    """Vue pour les actions sur suggestions proactives"""

    def __init__(self, cog: ProactiveMatching, candidate_id: str, nonce: str):
        super().__init__(timeout=86400)  # 24h
        self.cog = cog
        self.candidate_id = candidate_id
        self.nonce = nonce

    @discord.ui.button(label="üëÅÔ∏è Voir d√©tails", style=discord.ButtonStyle.gray)
    async def pro_view(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message(
            "üîç Vue d√©taill√©e (√† impl√©menter)",
            ephemeral=True
        )

    @discord.ui.button(label="‚úÖ Int√©ress√©(e)", style=discord.ButtonStyle.green)
    async def pro_accept(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.cog.handle_proactive_accept(interaction, self.candidate_id, self.nonce)
        self.stop()

    @discord.ui.button(label="‚è≠Ô∏è Passer", style=discord.ButtonStyle.secondary)
    async def pro_next(self, interaction: discord.Interaction, button: discord.ui.Button):
        from .utils import db_instance

        # Marquer comme pass√©
        await db_instance.connection.execute("""
            UPDATE suggestions SET status = 'passed', updated_at = ?
            WHERE candidate_id = ? AND nonce = ?
        """, (datetime.now().isoformat(), self.candidate_id, self.nonce))
        await db_instance.connection.commit()

        await interaction.response.send_message(
            "‚è≠Ô∏è Suggestion ignor√©e. Vous en recevrez d'autres prochainement !",
            ephemeral=True
        )
        self.stop()

    @discord.ui.button(label="üö® Signaler", style=discord.ButtonStyle.red)
    async def pro_report(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message(
            "üö® Profil signal√© (√† impl√©menter)",
            ephemeral=True
        )
        self.stop()

    @discord.ui.button(label="‚öôÔ∏è D√©sactiver suggestions", style=discord.ButtonStyle.secondary)
    async def pro_opt_out(self, interaction: discord.Interaction, button: discord.ui.Button):
        from .utils import db_instance

        # Mettre √† jour pr√©f√©rences pour opt-out
        await db_instance.connection.execute("""
            UPDATE profiles SET prefs = json_set(COALESCE(prefs, '{}'), '$.opt_out_proactive', true)
            WHERE user_id = ?
        """, (str(interaction.user.id),))
        await db_instance.connection.commit()

        await interaction.response.send_message(
            "‚öôÔ∏è **Suggestions automatiques d√©sactiv√©es.**\n"
            "Vous pouvez toujours utiliser `/findmatch` manuellement.",
            ephemeral=True
        )
        self.stop()

async def setup(bot):
    """Fonction obligatoire pour charger le cog"""
    await bot.add_cog(ProactiveMatching(bot))